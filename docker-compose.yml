version: '3'

services:

    #Centralized Log Management
    seq:
        image: datalust/seq:latest
        ports:
            - 5341:80
        environment: 
            ACCEPT_EULA: Y
        restart: unless-stopped
        volumes: 
            - ./seq-data:/data
        networks:
            - my-network
    
    postgresql-master:
        image: 'bitnami/postgresql:latest'
        restart: 'on-failure'
        ports:
            - '5432'
        volumes:
            - './postgresql_master_data:/bitnami/postgresql'
            - './KeyRangeGeneratorSQL/create_table.sql:/docker-entrypoint-initdb.d/create_tables.sql'
            - './KeyRangeGeneratorSQL/fill_table.sql:/docker-entrypoint-initdb.d/fill_tables.sql'
        environment:
            - POSTGRESQL_REPLICATION_MODE=master
            - POSTGRESQL_REPLICATION_USER=repl_user
            - POSTGRESQL_REPLICATION_PASSWORD=repl_password
            - POSTGRESQL_USERNAME=my_user
            - POSTGRESQL_PASSWORD=my_password
            - POSTGRESQL_DATABASE=my_database
        networks:
            - my-network
      
    postgresql-slave:
        image: 'bitnami/postgresql:latest'
        ports:
            - '5432'
        depends_on:
            - postgresql-master
        environment:
            - POSTGRESQL_REPLICATION_MODE=slave
            - POSTGRESQL_REPLICATION_USER=repl_user
            - POSTGRESQL_REPLICATION_PASSWORD=repl_password
            - POSTGRESQL_MASTER_HOST=postgresql-master
            - POSTGRESQL_PASSWORD=my_password
            - POSTGRESQL_MASTER_PORT_NUMBER=5432
        networks:
            - my-network
    
    key-range-provider:
        environment:
            - "ASPNETCORE_LOG_HOST=http://seq:5341"
            - "ASPNETCORE_DB_CONN=Host=postgresql-master;Port=5432;User Id=my_user;Password=my_password;Database=my_database;Pooling=true;"
        build: ./HelloShortly.KeyManagementSolutions/HelloShortly.KMM.RestApi/
        restart: unless-stopped
        expose: 
            - "80"
        depends_on:
            - seq
            - postgresql-master
        networks:
            - my-network  
            
    #Load balancer for Key Range Service Provider
    key-range-provider_lb:
        image: nginx:latest
        restart: on-failure
        volumes:
            - ./KeyRangeServiceLoadBalancerConfig/nginx.conf:/etc/nginx/nginx.conf:ro
        depends_on:
            - key-range-provider
        ports:
            - "4000:4000" 
        networks:
            - my-network

    # mongo1:
    #     hostname: mongo1
    #     container_name: localmongo1
    #     image: mongo:4.0-xenial
    #     expose:
    #         - 27017
    #     restart: always
    #     entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0" ]

    # mongo2:
    #     hostname: mongo2
    #     container_name: localmongo2
    #     image: mongo:4.0-xenial
    #     expose:
    #         - 27017
    #     restart: always
    #     entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0" ]

    # mongo3:
    #     hostname: mongo3
    #     container_name: localmongo3
    #     image: mongo:4.0-xenial
    #     expose:
    #         - 27017
    #     restart: always
    #     entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0" ]

    # mongosetup:
    #     image: mongo:4.0-xenial
    #     depends_on:
    #         - mongo1
    #         - mongo2
    #         - mongo3
    #     volumes:
    #         - ./MongoClusterConfig/mongo_setup.sh:/etc/scripts
    #     restart: "no"
    #     entrypoint: [ "bash", "/etc/scripts/mongo_setup.sh"]

    mongo_db:
        image: 'mongo'
        container_name: 'my-mongo-container'
        environment: 
            - "MONGO_INITDB_DATABASE=short_urls"
            - "MONGO_INITDB_ROOT_USERNAME=mongo_root"
            - "MONGO_INITDB_ROOT_PASSWORD=secret"
        volumes: 
            - ./MongoDbConfig/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
            - ./mongo-volume:/data/db
        ports:
            - '27017-27019:27017-27019'
        networks: 
            - my-network

    redis-master:
        image: 'bitnami/redis:latest'
        ports:
          - '6379'
        environment:
          - REDIS_REPLICATION_MODE=master
          - REDIS_PASSWORD=my_master_password
        volumes:
          - './redis-persistence:/bitnami'
        networks:
          - my-network
    
    redis-replica:
        image: 'bitnami/redis:latest'
        ports:
          - '6379'
        depends_on:
          - redis-master
        environment:
          - REDIS_REPLICATION_MODE=slave
          - REDIS_MASTER_HOST=redis-master
          - REDIS_MASTER_PORT_NUMBER=6379
          - REDIS_MASTER_PASSWORD=my_master_password
          - REDIS_PASSWORD=my_replica_password   
        networks:
            - my-network 
            
    url_distributer:
        build: ./HelloShortly.UrlDistributerSolutions/HelloShortly.UrlDistributerRestApi/
        restart: on-failure
        expose: 
            - "80"
        environment:
            - "ASPNETCORE_LOG_HOST=http://seq:5341"
            - "KEY_RANGE_GET_API=http://key-range-provider_lb:4000/KeyRanges"
            - "MONGO_CONN=mongodb://secret_user:secret_password@mongo_db:27017/short_urls"
            - "MONGO_DB_NAME=short_urls"
            - "Mongo_COLLECTION_NAME=urls"
            - "REDIS_CONN=redis-master:6379,password=my_master_password" 
            - "LOAD_BALANCER=http://localhost:5000/"
        depends_on:
            - seq
            - redis-master
            - key-range-provider_lb
            - mongo_db
        networks:
            - my-network

    url_distributer_lb:
        image: nginx:latest
        restart: on-failure
        volumes:
            - ./UrlDistributionLBConfig/nginx.conf:/etc/nginx/nginx.conf:ro
        depends_on:
            - key-range-provider
        ports:
            - "5000:8080" 
        networks:
            - my-network


networks:
    my-network:
        driver: bridge
        external: true
    
            


    
            

    
    
    
    
        
    

  